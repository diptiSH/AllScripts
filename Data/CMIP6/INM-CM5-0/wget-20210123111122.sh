#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-data.dkrz.de - 2021/01/23 11:11:22
# Search URL: https://esgf-data.dkrz.de/esg-search/wget/?distrib=false&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r1i1p1f1.day.tas.gr1.v20190610|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r1i1p1f1.day.ta.gr1.v20190610|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r1i1p1f1.fx.orog.gr1.v20190610|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r1i1p1f1.day.hurs.gr1.v20190610|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r1i1p1f1.day.uas.gr1.v20190610|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r1i1p1f1.day.vas.gr1.v20190610|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r1i1p1f1.day.ua.gr1.v20190610|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r1i1p1f1.day.va.gr1.v20190610|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r1i1p1f1.day.zg.gr1.v20190610|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r1i1p1f1.day.wap.gr1.v20190610|esgf3.dkrz.de
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf-data.dkrz.de/esg-search/wget/?distrib=false&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r1i1p1f1.day.tas.gr1.v20190610|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r1i1p1f1.day.ta.gr1.v20190610|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r1i1p1f1.fx.orog.gr1.v20190610|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r1i1p1f1.day.hurs.gr1.v20190610|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r1i1p1f1.day.uas.gr1.v20190610|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r1i1p1f1.day.vas.gr1.v20190610|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r1i1p1f1.day.ua.gr1.v20190610|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r1i1p1f1.day.va.gr1.v20190610|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r1i1p1f1.day.zg.gr1.v20190610|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r1i1p1f1.day.wap.gr1.v20190610|esgf3.dkrz.de'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'hurs_day_INM-CM5-0_historical_r1i1p1f1_gr1_18500101-18991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/hurs/gr1/v20190610/hurs_day_INM-CM5-0_historical_r1i1p1f1_gr1_18500101-18991231.nc' 'SHA256' '311ddb8b1c4ac5ae3e05ce585f093eb7c2523311722c3af02e5f296f0ed25324'
'hurs_day_INM-CM5-0_historical_r1i1p1f1_gr1_19000101-19491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/hurs/gr1/v20190610/hurs_day_INM-CM5-0_historical_r1i1p1f1_gr1_19000101-19491231.nc' 'SHA256' '1de8cfba5b48904ed86895f6ff0efebb41a3c1cc30186246e0e2e10983dc8084'
'hurs_day_INM-CM5-0_historical_r1i1p1f1_gr1_19500101-19991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/hurs/gr1/v20190610/hurs_day_INM-CM5-0_historical_r1i1p1f1_gr1_19500101-19991231.nc' 'SHA256' '30ed08942c82bcccca04999e243f39babadabea8a3fb2c82409c916812edacb6'
'hurs_day_INM-CM5-0_historical_r1i1p1f1_gr1_20000101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/hurs/gr1/v20190610/hurs_day_INM-CM5-0_historical_r1i1p1f1_gr1_20000101-20141231.nc' 'SHA256' '1c7507bd453996590ab8e8939b9028b58a9a23b3651b2181b06fe8ac54dfcf2e'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_18500101-18541231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_18500101-18541231.nc' 'SHA256' '08bb0b10c61aa5f47354702846a8b4193a3f0a709ebf0780fea62a974224f779'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_18550101-18591231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_18550101-18591231.nc' 'SHA256' 'd011086024cecbdb3ad8de3f2356ff2b72e607b6941dba263a4919c5c0f1d52c'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_18600101-18641231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_18600101-18641231.nc' 'SHA256' '87ec595203dad746a3e3cc55fa65ce483e1b17d208ebbc7cdb846c3d967f8c05'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_18650101-18691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_18650101-18691231.nc' 'SHA256' 'da55bee31895754c73586c08dc37feabf67ca5877f21e215fbf9fe8125d4dbd7'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_18700101-18741231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_18700101-18741231.nc' 'SHA256' 'd9a6f80fc634c1c4087e8981985b31b3f37fbf7c9658db363db514af9680ba06'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_18750101-18791231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_18750101-18791231.nc' 'SHA256' 'eb0258c1be73014d605b3f37e528b4dca6642229d7d65df5a9a985d379e636c6'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_18800101-18841231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_18800101-18841231.nc' 'SHA256' 'd6f5f5b6e1ff28fd6cdd4177c869fafc1d65b507a2d910d5f95c2b9ddee6d310'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_18850101-18891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_18850101-18891231.nc' 'SHA256' '8fad75f75d6b567b52cabd9d42f1c7d501b0bb9b54aaf8d3819502cc9b7bea10'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_18900101-18941231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_18900101-18941231.nc' 'SHA256' '2ecb32982018b6a3ca1bdfb38da10a22105180984d730539725eaec247906a7a'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_18950101-18991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_18950101-18991231.nc' 'SHA256' 'cdad355354afb238c83a8283ff055c404a1e0a1c70818893f78a3aa4aef94dec'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19000101-19041231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19000101-19041231.nc' 'SHA256' '8a62506d953ab4f6c9e3b462903e97839d6f09e1a6d820dc65679c554d7145e5'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19050101-19091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19050101-19091231.nc' 'SHA256' '7244ae0393476ce4fe9624a73883ca154ed505c08a380c21f739deb7ab084a92'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19100101-19141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19100101-19141231.nc' 'SHA256' '2e1f91df55da61d2cf899da92db8e074aa789fabc753249872173833dd5c5d83'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19150101-19191231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19150101-19191231.nc' 'SHA256' 'c31586097faddc2cc49ac74510568e2c9f8affeef1b0239d212c87bb93bb01c5'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19200101-19241231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19200101-19241231.nc' 'SHA256' '8258ee340dcd86fdb8792cd2ce26aec2be38d338b306c626b0f16402807504a4'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19250101-19291231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19250101-19291231.nc' 'SHA256' 'f1311c05624d261ba5b1ec7ba680236ac8bbe7a50ab8112ad2e1621698020428'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19300101-19341231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19300101-19341231.nc' 'SHA256' 'ec53ffa0a275cc97a3c3cbc717446ece1ea5598f78dabd08e6aecfbf02f2e2d8'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19350101-19391231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19350101-19391231.nc' 'SHA256' '2b2b5e273e3911fd5f470895eb35177d54fc579b513288ec383ccd31055ae1e1'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19400101-19441231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19400101-19441231.nc' 'SHA256' '1e8f176deced0c929bc4538b981cd41dd891389cebe69d832c03d660a5527fc2'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19450101-19491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19450101-19491231.nc' 'SHA256' '9f7f7ed01d9c2acae312ad75afd939e1fca1714dfaf72f47996d1ea941169b9b'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19500101-19541231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19500101-19541231.nc' 'SHA256' 'a201c0dc33c4cd59b603b1506a43de766f92cda4e307ef9f4d13cb13eb2ff39c'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19550101-19591231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19550101-19591231.nc' 'SHA256' 'df866a8a359bf430144418b17fbeac94ec1bc3921088303f9d4a2dabd665e31b'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19600101-19641231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19600101-19641231.nc' 'SHA256' 'b87ee4f2addfdefbacc7169cd602fdc3c27d3c06d5e9cffd832cc2ff517b2012'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19650101-19691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19650101-19691231.nc' 'SHA256' 'b8fd42068116a2cedb309da009dc920bdda5f6ffa827a74d297e141933247ea3'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19700101-19741231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19700101-19741231.nc' 'SHA256' 'fcbd341214b8925d5cc78916d576a9432faa6d67eae01189572652b1ebfee294'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19750101-19791231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19750101-19791231.nc' 'SHA256' '9a03b62da2bae0bd50d5ac929f24aa6122877f9e39d5c7f3f4248ad49c09c931'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19800101-19841231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19800101-19841231.nc' 'SHA256' 'b9e6aed4c049a1989e7636e575d9467e0d4f05dc24504187ec2e54d166215638'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19850101-19891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19850101-19891231.nc' 'SHA256' '8230ba785f6f3459d182454395bc21dc6ae829a17d7c2cd575a56ebc624963ed'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19900101-19941231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19900101-19941231.nc' 'SHA256' '405a3fc0976244f67a005378799f050c62a20ba4a9e4aeb4230d8a6998cf70f7'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19950101-19991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_19950101-19991231.nc' 'SHA256' 'f6fb547e7b9929dcfd5194264fc061bf109db1064ef48f154f4abb5e64b60042'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_20000101-20041231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_20000101-20041231.nc' 'SHA256' 'f24e4d74f56d2c31baf9a1cdcb082e84793e2091a5bef8b7b32669976097e099'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_20050101-20091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_20050101-20091231.nc' 'SHA256' '6bdd23c9eca926e1bbaa5fa5e9f7b3d1858d8f6c4d935f85f521642ba060d83f'
'ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_20100101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ta/gr1/v20190610/ta_day_INM-CM5-0_historical_r1i1p1f1_gr1_20100101-20141231.nc' 'SHA256' '62bd8a244beb9f3d4639290d4a64e3cbabc70d617cfcef6f65847d4894d81c08'
'tas_day_INM-CM5-0_historical_r1i1p1f1_gr1_18500101-18991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/tas/gr1/v20190610/tas_day_INM-CM5-0_historical_r1i1p1f1_gr1_18500101-18991231.nc' 'SHA256' 'a7a2503b51ed312d2be9aeeaef4b5431bdf1ff866853c9662cb1f17288a2a067'
'tas_day_INM-CM5-0_historical_r1i1p1f1_gr1_19000101-19491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/tas/gr1/v20190610/tas_day_INM-CM5-0_historical_r1i1p1f1_gr1_19000101-19491231.nc' 'SHA256' 'fe10101abf6183d75fec0e951d951bb9d773fdd5d2bdc68679cfdd41f63b3150'
'tas_day_INM-CM5-0_historical_r1i1p1f1_gr1_19500101-19991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/tas/gr1/v20190610/tas_day_INM-CM5-0_historical_r1i1p1f1_gr1_19500101-19991231.nc' 'SHA256' '1554d21677155c930f7225f36b7a3ec7b12d3deca36538384b1f1fbac7e97b90'
'tas_day_INM-CM5-0_historical_r1i1p1f1_gr1_20000101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/tas/gr1/v20190610/tas_day_INM-CM5-0_historical_r1i1p1f1_gr1_20000101-20141231.nc' 'SHA256' '7647696cf4b409bf51626fd8bc8fd94fec187f51fdd4c6fda01879dd81bed24b'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_18500101-18541231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_18500101-18541231.nc' 'SHA256' 'a28c558e1410413c84a1f6733940b0eb2b2c078ea301519513b46275d8e397aa'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_18550101-18591231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_18550101-18591231.nc' 'SHA256' '451732446238ff1fd9d7a4e3e03d34b048a4b1482dc22fd9e7dd684d0254e6ea'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_18600101-18641231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_18600101-18641231.nc' 'SHA256' '5858e06d77ef6dfb2087b2e2d6c5a0469e90ad33d5fe73a6325f4b2fa59238f2'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_18650101-18691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_18650101-18691231.nc' 'SHA256' 'e5b5ec0c2cd217fef77edef5fece13571e7451bad40d4f2487d9dccc8c68a277'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_18700101-18741231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_18700101-18741231.nc' 'SHA256' '5ea7426d91281f9608e620ba5bac92f9bcd491b15fc598d1ebde3c73216b720a'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_18750101-18791231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_18750101-18791231.nc' 'SHA256' '75f06ce9298ca32506a33baa70378071dc19876e203322eff88660ba4d0f9c33'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_18800101-18841231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_18800101-18841231.nc' 'SHA256' '2f0831e3e07c7964c77d1daf243a92a512c328a5b5d3619902c2e560ece6866f'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_18850101-18891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_18850101-18891231.nc' 'SHA256' 'bf85812b6ac9d378dbcd4649b1bf6462fdd08d1d2f6c3d45430fff244e84a859'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_18900101-18941231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_18900101-18941231.nc' 'SHA256' '3842da9cbfc1b6f484edc3e8de9195068722f58d2e20cf7824fb638e220f263b'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_18950101-18991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_18950101-18991231.nc' 'SHA256' '891d7cca91834e296a6700f25291537d04e77341f56c8ac1fb99cc0f308b5bb2'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19000101-19041231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19000101-19041231.nc' 'SHA256' 'c2309b919ffe2786d67ccc7eb82ba2a6328dd085c699848b13528b714df711f6'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19050101-19091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19050101-19091231.nc' 'SHA256' '469444492a055f5bd73d4e1b1f4e3368ee9f370eab35f0dfc95fca1cfc4c7e60'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19100101-19141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19100101-19141231.nc' 'SHA256' '67f61ab28174e75dd66424310cb20d889fa03f05daaa97429c24aefcce94f155'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19150101-19191231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19150101-19191231.nc' 'SHA256' '186686fca98ff1dc379dc1b7d030e3fbc32b8f5c4a7378d7c6cae75e008798e9'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19200101-19241231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19200101-19241231.nc' 'SHA256' 'bb384579f997bf46e5ad40f9afe6737a08ef45505244e1b611fd2d14ec45ea8b'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19250101-19291231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19250101-19291231.nc' 'SHA256' 'a3192771e3105c0965621b204dfa110a232d6381bec3697098706759189585e2'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19300101-19341231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19300101-19341231.nc' 'SHA256' 'e81cd552409abae3c272f3292bbd5e96891ef37af025d464fb1702227aadf4e5'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19350101-19391231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19350101-19391231.nc' 'SHA256' 'bd91ecf197a867963afaeacce62fd2a40c92529f5dc22a13e90279a6cc61ae49'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19400101-19441231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19400101-19441231.nc' 'SHA256' 'be4bda88c564ddf4f142b6b62520360a718874aab2c7ee01d220f4e167c8feca'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19450101-19491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19450101-19491231.nc' 'SHA256' 'd93fc3e9ad98b259e0d2aa7d457ed12745215d369d81a1683d6d76ff43de4727'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19500101-19541231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19500101-19541231.nc' 'SHA256' '5a34bcb33f9e1ab8d32ac06500d17a6ec337131dc384fa4549a034aa30293bbb'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19550101-19591231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19550101-19591231.nc' 'SHA256' '08d1ff634c80da8221a952f7040c99c2c3047010b78dc7a072d615696bd71647'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19600101-19641231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19600101-19641231.nc' 'SHA256' '0522c2e4e669d23d5910ba3ec5599c78b0625b0ccbe870a038811c2296188632'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19650101-19691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19650101-19691231.nc' 'SHA256' '4412022268bfe7c46986a86c476e78d4826bb1da5ae6cece85f899c0f7b01539'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19700101-19741231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19700101-19741231.nc' 'SHA256' 'ac7afb5fc8260fe82bc50588337e1b4a25bdd61d3abc35145f9883ca68a3818f'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19750101-19791231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19750101-19791231.nc' 'SHA256' '2a3b6c09535951571ae52ac8f70498e565951902fe69f750daf2ee66c9716f19'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19800101-19841231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19800101-19841231.nc' 'SHA256' '0ab93e465826752a554c9a06ba54a7665e55e2c03bb88ab7b8d88a15ba086365'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19850101-19891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19850101-19891231.nc' 'SHA256' 'ca582e58e875a2b6bf8f62730017e405b3311332f306fb6d53bada3c5cc33bfa'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19900101-19941231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19900101-19941231.nc' 'SHA256' 'c15cb94ca95ec4a05b19eb534bb4eaa354d5281b51a06320edec5a0e545d75c4'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19950101-19991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_19950101-19991231.nc' 'SHA256' '9529e3d3e1faf70d8ad4f71db90141336d0d28e3f2a7ce2cfbdcc1f9c8f14163'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_20000101-20041231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_20000101-20041231.nc' 'SHA256' '81ecc95d5ff05420813aba132edcdaab83ef483ffe1ff1f855793193b6a9cafd'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_20050101-20091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_20050101-20091231.nc' 'SHA256' '6789e8550b04198f791403506b51a524e64011831f7abf890b1f698dcf11c0e2'
'ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_20100101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/ua/gr1/v20190610/ua_day_INM-CM5-0_historical_r1i1p1f1_gr1_20100101-20141231.nc' 'SHA256' 'a0e2b4881f2d5b6ebbbb5b6c934f5181e4601e7457d78a92b9f74aea1d9edd8e'
'uas_day_INM-CM5-0_historical_r1i1p1f1_gr1_18500101-18991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/uas/gr1/v20190610/uas_day_INM-CM5-0_historical_r1i1p1f1_gr1_18500101-18991231.nc' 'SHA256' '3837738d346d147f7ba26dd5e2586ab5118038daf203fd8f37352f68a1dcf709'
'uas_day_INM-CM5-0_historical_r1i1p1f1_gr1_19000101-19491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/uas/gr1/v20190610/uas_day_INM-CM5-0_historical_r1i1p1f1_gr1_19000101-19491231.nc' 'SHA256' 'd8a8385d2e79bf395b188886d95944d148599a261aaf7880181a6f9a0fea251f'
'uas_day_INM-CM5-0_historical_r1i1p1f1_gr1_19500101-19991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/uas/gr1/v20190610/uas_day_INM-CM5-0_historical_r1i1p1f1_gr1_19500101-19991231.nc' 'SHA256' '407633cd9fc91b8155ceee6468b90c426973c75ccc3e2296e5619ec28018a990'
'uas_day_INM-CM5-0_historical_r1i1p1f1_gr1_20000101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/uas/gr1/v20190610/uas_day_INM-CM5-0_historical_r1i1p1f1_gr1_20000101-20141231.nc' 'SHA256' '92b5f128d5d3c2ab3dec01c6015c51a229d6f6c17f838a33e984916bb6134f10'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_18500101-18541231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_18500101-18541231.nc' 'SHA256' '72b7dcb42393d71edc868978d763545c629fd87f226b1ea44245c87a442260f2'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_18550101-18591231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_18550101-18591231.nc' 'SHA256' '68445bbdc76c8f4e0b94deae0d88d8228dd48ca1b23ea40e3d182c69d70d7570'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_18600101-18641231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_18600101-18641231.nc' 'SHA256' '2c3df301f3160d94c30386b2c67e6b364331b296f076e72000efb866896effec'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_18650101-18691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_18650101-18691231.nc' 'SHA256' '3c753f02f7e6549b57008e3de75d43b100b3600f693d07acf75f4dea0a4471dc'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_18700101-18741231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_18700101-18741231.nc' 'SHA256' '57529f07214d4973eb8a56ea8c09b8e0c211b1101059821437e03c838c4a8246'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_18750101-18791231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_18750101-18791231.nc' 'SHA256' '7cecc96288a2b16ad0a956ba362cc407e93fab9ed1f7cd1e7ae6cf693bdb0a7c'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_18800101-18841231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_18800101-18841231.nc' 'SHA256' '85da1827c1a051e9051e204b85eed1a88f04c079fa6c7d261da787347c004dc3'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_18850101-18891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_18850101-18891231.nc' 'SHA256' 'd24f94f5bf9dc1486d2486d7c36136e6d785f238c86707f3003a4a0fcbd07a20'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_18900101-18941231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_18900101-18941231.nc' 'SHA256' '07f75028d0b7a0a3cf97e6d83f78cf20a91f75dea9a6400e8e830264e69243a0'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_18950101-18991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_18950101-18991231.nc' 'SHA256' 'baff22ed24f7983cf0ab2b5444b2d226e72372e5ba00d8d42d6cfe19ffe83214'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19000101-19041231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19000101-19041231.nc' 'SHA256' '0367638100f5c59112907dcc7b59a0f2e1625190a08989b8ad96aee136af6201'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19050101-19091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19050101-19091231.nc' 'SHA256' '5f788218a50a41b105d7ba93c10e3ee6ccf91b47b5043b8ce99498da1c18dc93'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19100101-19141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19100101-19141231.nc' 'SHA256' '33ddf8c428a07e85e3b191279e1ff93941a942a17dd8e9c3cebb057cdfa5f5dc'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19150101-19191231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19150101-19191231.nc' 'SHA256' '317c82843407a6be3cf4b96b3becd2bec70b7b50eebebd512bc99589e6801c55'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19200101-19241231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19200101-19241231.nc' 'SHA256' '8051a2919ae49b1906965ff57fa8c49b49aebdad4423b5913c73c478cf6c3874'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19250101-19291231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19250101-19291231.nc' 'SHA256' '20970b26b8f577e84c175424dfd4e178ad308be9eaca92156ab960d913251b44'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19300101-19341231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19300101-19341231.nc' 'SHA256' 'c09c78d7eb8861e5673ef81e97084deddd2cb28c4ee3a8873e8ff270a64c8869'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19350101-19391231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19350101-19391231.nc' 'SHA256' 'a88328c1db81cd2919ab7c30d07dea0cb74733daf29e051b6183c40b0b62c6a0'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19400101-19441231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19400101-19441231.nc' 'SHA256' 'c9a61b2ffb07d048ef7e059fd9e753891edb00b73ec24fb59d64a6102919af89'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19450101-19491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19450101-19491231.nc' 'SHA256' 'a9743556284aeaeb71c6c5ee923f210f6deb8b5cbe48ef9de54e76960f356208'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19500101-19541231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19500101-19541231.nc' 'SHA256' '3ff40c34ff9e6081328ebd6608d18205aa81a5dd915258528a8069ec898af481'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19550101-19591231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19550101-19591231.nc' 'SHA256' '65f0e13708d993f89e6dc116de6b6ef107420786fb2d9401e6a3a9af2e55bf1a'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19600101-19641231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19600101-19641231.nc' 'SHA256' '412d3ffe26dd79a3b385434d166a053624a5f96ca97a0d035a62a1075fabde51'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19650101-19691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19650101-19691231.nc' 'SHA256' '272763aa9c79ade644e525ac20f12b978f1ce7338b9d1fbfa2b0a5f690672920'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19700101-19741231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19700101-19741231.nc' 'SHA256' '7c057f37a8ea15840ddb8dd5619a38c0c10a20d28699072e27db33177379d629'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19750101-19791231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19750101-19791231.nc' 'SHA256' 'f93cbfc518706df1272a556855e1cbbfc57efdafe4f2a4414d12cf74e2b658de'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19800101-19841231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19800101-19841231.nc' 'SHA256' '862a647fb45492ca184943bacf991d3765f498081f61aa285b3be323ffb128af'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19850101-19891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19850101-19891231.nc' 'SHA256' 'b0e2508ce88ad1a58c918f6963dbbefd77f316620e963d58968723728e8e79ad'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19900101-19941231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19900101-19941231.nc' 'SHA256' '7e8171468fbe1f4ba4cccfdd975fa9d72cea7cbcc36fc1b6e5d41d632326fa92'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19950101-19991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_19950101-19991231.nc' 'SHA256' 'fcbbe6dc9ecb133650e53a5aa643898ebeb8d4b55451c7ab3e953cf4f61f7c23'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_20000101-20041231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_20000101-20041231.nc' 'SHA256' 'b7ef21489cf847b04a1705f470d9cfb582408214d75a8e2d56b39caab301c17c'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_20050101-20091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_20050101-20091231.nc' 'SHA256' '7301deced57763b54459c6173d1382cdd8de5057531c640876e9d7d8957a81e2'
'va_day_INM-CM5-0_historical_r1i1p1f1_gr1_20100101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/va/gr1/v20190610/va_day_INM-CM5-0_historical_r1i1p1f1_gr1_20100101-20141231.nc' 'SHA256' '5acd8e4bda434ad2e15a808b4946d06e5ba8b0fd338d61722d8acf68a41ca080'
'vas_day_INM-CM5-0_historical_r1i1p1f1_gr1_18500101-18991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/vas/gr1/v20190610/vas_day_INM-CM5-0_historical_r1i1p1f1_gr1_18500101-18991231.nc' 'SHA256' '5040ae82e5394d92755ccb2dc46a96d137d46cb36dd6e80308eaf6fb3e8d087b'
'vas_day_INM-CM5-0_historical_r1i1p1f1_gr1_19000101-19491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/vas/gr1/v20190610/vas_day_INM-CM5-0_historical_r1i1p1f1_gr1_19000101-19491231.nc' 'SHA256' '986daf9fbe34e500ae7f1dd5c8cd9957d9a51935ebeae2ed73c2dbef1959f2a7'
'vas_day_INM-CM5-0_historical_r1i1p1f1_gr1_19500101-19991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/vas/gr1/v20190610/vas_day_INM-CM5-0_historical_r1i1p1f1_gr1_19500101-19991231.nc' 'SHA256' 'e4e124403801f4d2eec29184ce2a434f19227f7656b5dda5ab2331fd0a07f3a0'
'vas_day_INM-CM5-0_historical_r1i1p1f1_gr1_20000101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/vas/gr1/v20190610/vas_day_INM-CM5-0_historical_r1i1p1f1_gr1_20000101-20141231.nc' 'SHA256' 'c25c35c1d82d9e147bd05aaabb6216c7f4f17373ef96539ddc69d87fd0ce49da'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_18500101-18541231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_18500101-18541231.nc' 'SHA256' '5728f0fba83a44db5b7dc920ab748a9a3b032532855f41a11ee0f768f94c8086'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_18550101-18591231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_18550101-18591231.nc' 'SHA256' 'ffdb91afdd1d1de5fda77987d78ffbed24c5261e41c944a54d0eb9bc7208613b'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_18600101-18641231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_18600101-18641231.nc' 'SHA256' '68b18024135fc8a394d5a346d5099b0a1e8455e78d8de1ec69a0fcde1ae9adcb'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_18650101-18691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_18650101-18691231.nc' 'SHA256' '379620c6cdf18511b2236df5c71dded3105815ec03b29982e69e3afe26379e43'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_18700101-18741231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_18700101-18741231.nc' 'SHA256' '98bcedfb3e1ae1dff390a11489337464cb777a8093bcc4f0c0c3f030a12dd608'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_18750101-18791231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_18750101-18791231.nc' 'SHA256' '582cdab89661bdac87c256686ce64b1f4063d8ca2cb6c4fd14ba3ac61a0eb964'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_18800101-18841231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_18800101-18841231.nc' 'SHA256' 'f75a08d7cf13ef112c781ceeca7347572936afc3bf7b68c6f5dbf7974793abf5'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_18850101-18891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_18850101-18891231.nc' 'SHA256' '111f8f8b7e4181d3680f27d7e3136db3bce43fb1344deba8352219e53b5b89cf'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_18900101-18941231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_18900101-18941231.nc' 'SHA256' '54810eaa9aa948277912ebf018c4e27467c36c1631e68407b38e489da3b297f0'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_18950101-18991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_18950101-18991231.nc' 'SHA256' 'e43056c722fbb0b53c1457f9c83b90cfc9bf04b6bbd6167b0a733d742cd05836'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19000101-19041231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19000101-19041231.nc' 'SHA256' '9a330ee7f2e592eb19a5b06bfb193dca71eff2fe665f4af223cf5d789d5b59fb'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19050101-19091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19050101-19091231.nc' 'SHA256' 'b6ca220127206dcff3aed69c84d83798e18ef45c8524d2b6f03666da96b7c1f9'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19100101-19141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19100101-19141231.nc' 'SHA256' '6d3e4a704ea36eb3c4c86e23fce05cafbac59a3d409a2922c7e3c29dadbc93ae'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19150101-19191231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19150101-19191231.nc' 'SHA256' '45f48502297dfe3adfcdb68225d2957eb95a80e9b1774c6a4520951d4a841afe'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19200101-19241231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19200101-19241231.nc' 'SHA256' '5506ecd07f2bfd4f156c91d08a812ff533a30778c0b3182476e197b2a59948da'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19250101-19291231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19250101-19291231.nc' 'SHA256' 'e4056292aa84ee905e33e9577a27c80640d4ac3eceae980e3e6f8164856bdd7b'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19300101-19341231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19300101-19341231.nc' 'SHA256' '99ba17ab9b737eca4b891db9505b772c7031e583282b78423ee1e6d7d705a52c'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19350101-19391231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19350101-19391231.nc' 'SHA256' '2f287da9a7f7c0be7e5ddcc2aa2d6bf3a8dbe8733fef02a4e3bdab9d659444b8'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19400101-19441231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19400101-19441231.nc' 'SHA256' 'fcf66f3f236f1f950a1940a01b1eb6d832769cb43c7f7e502efbc02a290d6907'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19450101-19491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19450101-19491231.nc' 'SHA256' 'f91d05ada111adc3b940bb5ef4d00be9fce4bcdaa4277dcec7aac5e1c39b4fe6'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19500101-19541231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19500101-19541231.nc' 'SHA256' 'aa25275dd6408faf34f1da6cd8bc4249a01ba05487120cf629fa06c25d8bd121'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19550101-19591231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19550101-19591231.nc' 'SHA256' '94eeb96478fdcb84b6e16ec7a83b0cf3c7a2874acf3fae32cec61a20bf4065dd'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19600101-19641231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19600101-19641231.nc' 'SHA256' 'd315efaeb669198caf28a2f293aa612f173a6a0ecd21bd49c9bc3540b7ba79dd'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19650101-19691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19650101-19691231.nc' 'SHA256' 'bf8d1c21cb96bae8637d55673e6ba622d4d338e9cd9d0e00c693d61312f4f480'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19700101-19741231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19700101-19741231.nc' 'SHA256' '1f9bc487b44b06dfb8f3f8548fc0f3e65266255e29086f5ce8efa711b20b62b6'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19750101-19791231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19750101-19791231.nc' 'SHA256' 'de4279e14a750223a1a4ea1f09cee3f76e5656fb3026436d42b3ac7c513247b5'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19800101-19841231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19800101-19841231.nc' 'SHA256' 'bae1e2b562106ee55d143ef0803193de1be7a4580f47438b1d334ddf6f10e57d'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19850101-19891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19850101-19891231.nc' 'SHA256' '367d9b1387cee64c0c580de39da34ec429a3b0c4908f1db6e3bddde9ae815e1a'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19900101-19941231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19900101-19941231.nc' 'SHA256' 'a3bb94b9038b8768dba50ca4c3852b728f39701d3dead80c36eb419c636244d7'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19950101-19991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_19950101-19991231.nc' 'SHA256' '68ea31ecd4a5b84541e6495015dffc251cfa7115a2a0c69cba4a620c5e7a9959'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_20000101-20041231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_20000101-20041231.nc' 'SHA256' '1b994f69924f1ea5233bbc41c8fa84206f9417d892aca0cd87bec34655dfcf6d'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_20050101-20091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_20050101-20091231.nc' 'SHA256' 'f90c6d884cb2f10fdad7293594ad9ff6323ce67475118cc3f7263c2764c2947a'
'wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_20100101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/wap/gr1/v20190610/wap_day_INM-CM5-0_historical_r1i1p1f1_gr1_20100101-20141231.nc' 'SHA256' '106e53d658a976fa99757cfae6bda96d759daa57b1e4b9fd28258c125bf3fc3a'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_18500101-18541231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_18500101-18541231.nc' 'SHA256' '9291b8c40b7ff5edcf78866db08ad6f67f6f6d67726dcf7c4c147441fe5d22a0'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_18550101-18591231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_18550101-18591231.nc' 'SHA256' 'e6b7e48a05f26845694baeb54c5c041e5a31344cd7c74569eff069f617ae6d36'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_18600101-18641231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_18600101-18641231.nc' 'SHA256' 'b5f39b5a40dc8f878424a045b386d0716613c351027ce66e76e64ed52efc2aa9'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_18650101-18691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_18650101-18691231.nc' 'SHA256' '785f3b6e69cec2dc70ebcce76cd5b32eb8de4aab47e0131ca45c8a8359f7acfe'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_18700101-18741231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_18700101-18741231.nc' 'SHA256' 'c453a7063023d356b1b929aa493c37a8d4f4bd3099e54eb633c3c9ed95446a71'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_18750101-18791231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_18750101-18791231.nc' 'SHA256' '2fc142fa93e5c3c896f2109bd4da18960804a940ec06aca37fc0bba75e76b12a'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_18800101-18841231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_18800101-18841231.nc' 'SHA256' '8b5340d303f67de3466d181403ffc1334fca5965fac0267d21556373c9be4ff7'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_18850101-18891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_18850101-18891231.nc' 'SHA256' '8995b9d95ef82bb71258bc4b9e1162d6c6f3526c6b89b8d4d62d57482ef66352'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_18900101-18941231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_18900101-18941231.nc' 'SHA256' '82722d5ed85c2f3d5f3ff65bb14e6f247759f5c3f36310a5a67cbbb0c6e98998'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_18950101-18991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_18950101-18991231.nc' 'SHA256' '5b86db9b80692386f532589451ffdea821476f93f596e9687616143b674abe97'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19000101-19041231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19000101-19041231.nc' 'SHA256' '63551cb6a24e525bd06f17ab578f4b8914f214425a8f00f07ee2d01723e2ddf5'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19050101-19091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19050101-19091231.nc' 'SHA256' '4e14c7799ed065f0e684e1c15982b8a5558d3cc4c78209f2762111ec1974fc11'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19100101-19141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19100101-19141231.nc' 'SHA256' 'a75d2c6dd20cc48eea067196bf341a2aca195dd2f4e30c9ff14e7ae437cb4d9a'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19150101-19191231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19150101-19191231.nc' 'SHA256' 'd5341c5b179062249fc114fece759f5ff78beaf886bb1ce36c3bec2e600da579'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19200101-19241231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19200101-19241231.nc' 'SHA256' '7def343336f4f2a999215027e4fbbda599d41e0a719804108ed79c701a074ed2'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19250101-19291231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19250101-19291231.nc' 'SHA256' 'a8204159e210a53ec23eed1bd850b93bc7395921064a394909e55b360e424fb7'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19300101-19341231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19300101-19341231.nc' 'SHA256' 'dd5dd5bbec12f6da7f8346f9977071b1ffa1c1db09341f3a20b3707c0126497d'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19350101-19391231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19350101-19391231.nc' 'SHA256' '21c11e20abf160b7d9f39f6046a92f109616988023b71c8e65f5fa600c939560'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19400101-19441231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19400101-19441231.nc' 'SHA256' '9a5e5f68ae1e1e6a74cce755db60c9a1efb7ee6491a4db790948619686d6d80c'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19450101-19491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19450101-19491231.nc' 'SHA256' 'e82ef0aa067be22584eb2e5bd9c0cdda9928c62f152bdeea784710d466abd00e'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19500101-19541231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19500101-19541231.nc' 'SHA256' 'e5c9614368445188bc6ba8293b855e8e57aaa0b7c962f963e2fc4f4bc762435d'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19550101-19591231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19550101-19591231.nc' 'SHA256' '329b4509d9c8ebaef270ef0d9e16ce8192a9ad94949c899fb33ffeea90fbb710'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19600101-19641231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19600101-19641231.nc' 'SHA256' 'fd924f3bb947877e00d3e861655dde25030560556c50dfdac5ef0d308e5c9881'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19650101-19691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19650101-19691231.nc' 'SHA256' '69261bd25dd10e29757f076f50f9c58974549aa042fde6af71aa9329ffaf0f2d'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19700101-19741231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19700101-19741231.nc' 'SHA256' 'ddb848f3119c3f03921e144bc00c3b5a6c55facc8db72ef6b769b8cc2ce6aff4'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19750101-19791231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19750101-19791231.nc' 'SHA256' '180deda59f9e293fde11d834db7d55583fe697bdeaa3962afcfaa2e22f477b1a'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19800101-19841231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19800101-19841231.nc' 'SHA256' '8d760faf6d011bb4f547b99522b64d892f00c4dc0a36bbf652d5368a6c2cc61e'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19850101-19891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19850101-19891231.nc' 'SHA256' 'c243c713c1133335ca744ae112dba372f1eb9dffed6b62b875211e4bcb0d64fb'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19900101-19941231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19900101-19941231.nc' 'SHA256' '872f24b5dbcb2d65536be91014dac9761ad605b1777a6108ae413cd74ae697d2'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19950101-19991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_19950101-19991231.nc' 'SHA256' '76e8c7991d7d0d5498f1c608553a2e1ed66614be87a4612aac4513f04ae7ef06'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_20000101-20041231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_20000101-20041231.nc' 'SHA256' 'a8625400bcfb03d04b8cbdcff768275085bb4df53ddc5d9ad5398283688a7649'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_20050101-20091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_20050101-20091231.nc' 'SHA256' 'd80f46c67df4c71c5d5d35bfd7cb132e57e04c4849faebef8289373cc2ac0fed'
'zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_20100101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/day/zg/gr1/v20190610/zg_day_INM-CM5-0_historical_r1i1p1f1_gr1_20100101-20141231.nc' 'SHA256' 'c85151fa2f6f2716003fc9e8153f16c2b65baef22ea4d1072ade80e0c00b6164'
'orog_fx_INM-CM5-0_historical_r1i1p1f1_gr1.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/fx/orog/gr1/v20190610/orog_fx_INM-CM5-0_historical_r1i1p1f1_gr1.nc' 'SHA256' 'ed57218a4e325142d681fdde1b289985445e1f855702d1e84f98b7820487d5b5'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 182 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
