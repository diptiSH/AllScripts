#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-data.dkrz.de - 2021/03/10 10:11:58
# Search URL: https://esgf-data.dkrz.de/esg-search/wget/?distrib=false&dataset_id=CMIP6.CMIP.HAMMOZ-Consortium.MPI-ESM-1-2-HAM.historical.r1i1p1f1.day.zg.gn.v20190627|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.HAMMOZ-Consortium.MPI-ESM-1-2-HAM.historical.r1i1p1f1.day.wap.gn.v20190627|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.HAMMOZ-Consortium.MPI-ESM-1-2-HAM.historical.r1i1p1f1.day.hurs.gn.v20190627|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.HAMMOZ-Consortium.MPI-ESM-1-2-HAM.historical.r1i1p1f1.day.tas.gn.v20190627|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.HAMMOZ-Consortium.MPI-ESM-1-2-HAM.historical.r1i1p1f1.day.uas.gn.v20190627|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.HAMMOZ-Consortium.MPI-ESM-1-2-HAM.historical.r1i1p1f1.day.vas.gn.v20190627|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.HAMMOZ-Consortium.MPI-ESM-1-2-HAM.historical.r1i1p1f1.day.ta.gn.v20190627|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.HAMMOZ-Consortium.MPI-ESM-1-2-HAM.historical.r1i1p1f1.day.ua.gn.v20190627|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.HAMMOZ-Consortium.MPI-ESM-1-2-HAM.historical.r1i1p1f1.day.va.gn.v20190627|esgf3.dkrz.de
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf-data.dkrz.de/esg-search/wget/?distrib=false&dataset_id=CMIP6.CMIP.HAMMOZ-Consortium.MPI-ESM-1-2-HAM.historical.r1i1p1f1.day.zg.gn.v20190627|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.HAMMOZ-Consortium.MPI-ESM-1-2-HAM.historical.r1i1p1f1.day.wap.gn.v20190627|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.HAMMOZ-Consortium.MPI-ESM-1-2-HAM.historical.r1i1p1f1.day.hurs.gn.v20190627|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.HAMMOZ-Consortium.MPI-ESM-1-2-HAM.historical.r1i1p1f1.day.tas.gn.v20190627|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.HAMMOZ-Consortium.MPI-ESM-1-2-HAM.historical.r1i1p1f1.day.uas.gn.v20190627|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.HAMMOZ-Consortium.MPI-ESM-1-2-HAM.historical.r1i1p1f1.day.vas.gn.v20190627|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.HAMMOZ-Consortium.MPI-ESM-1-2-HAM.historical.r1i1p1f1.day.ta.gn.v20190627|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.HAMMOZ-Consortium.MPI-ESM-1-2-HAM.historical.r1i1p1f1.day.ua.gn.v20190627|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.HAMMOZ-Consortium.MPI-ESM-1-2-HAM.historical.r1i1p1f1.day.va.gn.v20190627|esgf3.dkrz.de'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'hurs_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18500101-18691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/hurs/gn/v20190627/hurs_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18500101-18691231.nc' 'SHA256' '0d3c878600b225884317f255f2bd01a53a5d41c01cc2b52e4b9c79e3befd45d3'
'hurs_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18700101-18891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/hurs/gn/v20190627/hurs_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18700101-18891231.nc' 'SHA256' 'bbb898cc38c3f35cfee44e40f4306e8dc8a4708c682efa57d9afa75bba8486eb'
'hurs_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18900101-19091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/hurs/gn/v20190627/hurs_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18900101-19091231.nc' 'SHA256' '72654b7197f11e7ec00559dc85ba08d3e2b1b2eb118d3eee3ba00ad4ad83d575'
'hurs_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19100101-19291231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/hurs/gn/v20190627/hurs_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19100101-19291231.nc' 'SHA256' 'e3e0a71c077ea482f39b356384b05f96f9c424f2c0054934cebaba6fe490a746'
'hurs_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19300101-19491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/hurs/gn/v20190627/hurs_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19300101-19491231.nc' 'SHA256' '27aa1995eb3ebe4a5f41897ae3dc45d020a9dd37fbdebf8b00116a2af3b9fc67'
'hurs_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19500101-19691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/hurs/gn/v20190627/hurs_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19500101-19691231.nc' 'SHA256' 'fb559be907a67bf8bc9bf2f173ab13019567dd6328720be43f58dc1d3025e5ef'
'hurs_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19700101-19891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/hurs/gn/v20190627/hurs_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19700101-19891231.nc' 'SHA256' '9ae49cfa1938ec096bac8f774e1d62e3316275af6092dfcb87c287f61d3f9c58'
'hurs_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19900101-20091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/hurs/gn/v20190627/hurs_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19900101-20091231.nc' 'SHA256' 'e2961e5a5a34f0d0c985ebcb6e31fabf5bda884216e33714518aab7432aecf95'
'hurs_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_20100101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/hurs/gn/v20190627/hurs_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_20100101-20141231.nc' 'SHA256' '688a9be3bb42c376d619b49c4ce3a7bcc46372c0808eb51bc49564d7746709b4'
'ta_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18500101-18691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/ta/gn/v20190627/ta_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18500101-18691231.nc' 'SHA256' '21b67ea2a1a44bb6c9e9ff0fd4e2f65686cdb9a1c8d0cd55c45b49ae5a104778'
'ta_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18700101-18891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/ta/gn/v20190627/ta_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18700101-18891231.nc' 'SHA256' '60273408415010fb9c86359acd72599d3c3a32f9f42439a3f99138150ce2b9cf'
'ta_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18900101-19091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/ta/gn/v20190627/ta_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18900101-19091231.nc' 'SHA256' '30b02b5912bcc302f3fdf3b98dd896186dcde58b9a551981bf65d1f82985f9a2'
'ta_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19100101-19291231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/ta/gn/v20190627/ta_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19100101-19291231.nc' 'SHA256' 'c3a171517deed72b3ef57494d1a1a48996f456a9bb7e6a71cca7166113fd34c5'
'ta_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19300101-19491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/ta/gn/v20190627/ta_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19300101-19491231.nc' 'SHA256' '3d6fb2ab42996ba4b0825b776bcb141a94b190fe0343daa36fc7006ca4f531ec'
'ta_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19500101-19691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/ta/gn/v20190627/ta_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19500101-19691231.nc' 'SHA256' '536e9fa799f3bad710f4a03eee24a09201ccf9ccb7db5572861842f2877219ea'
'ta_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19700101-19891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/ta/gn/v20190627/ta_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19700101-19891231.nc' 'SHA256' 'fff54e005a861c5b0cfd6cd604c962a0e3bc6e2ec237e50f91d73c81aa2d88ba'
'ta_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19900101-20091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/ta/gn/v20190627/ta_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19900101-20091231.nc' 'SHA256' 'bb1f379b201385bc3e6f70e03c782a1da53e452d2c5f48fe0dfa9cfa0aba98b1'
'ta_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_20100101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/ta/gn/v20190627/ta_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_20100101-20141231.nc' 'SHA256' 'cdd41a246ed1a598da517c2a5829543639de290e831224bc505b099cf90a1c85'
'tas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18500101-18691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/tas/gn/v20190627/tas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18500101-18691231.nc' 'SHA256' 'a7c261677d67c530e5938816b34ae1dca6fc3cb6f4fce653397c010053b3fe68'
'tas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18700101-18891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/tas/gn/v20190627/tas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18700101-18891231.nc' 'SHA256' 'a593cb973c08201de5f814b0eff726144d0b88a6e4c2645a14c3364064d6f90d'
'tas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18900101-19091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/tas/gn/v20190627/tas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18900101-19091231.nc' 'SHA256' '7ca748e6e0e2caf7de167c6b1a9799d83aaae6267cc70c579b66247b8cac1a6e'
'tas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19100101-19291231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/tas/gn/v20190627/tas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19100101-19291231.nc' 'SHA256' '7e9ba783afc1466c330a270729f4f7af817d612c78506ee403cb5ae75d9be271'
'tas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19300101-19491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/tas/gn/v20190627/tas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19300101-19491231.nc' 'SHA256' 'ebd5e6b655da5ff92a60f57757e7e8c1d7adfc082ccb9f855304d5b1408aa6b9'
'tas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19500101-19691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/tas/gn/v20190627/tas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19500101-19691231.nc' 'SHA256' '88168312a97efe753a14323d00ccedb63ac1cce3199c5eff0b5583834e34ed30'
'tas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19700101-19891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/tas/gn/v20190627/tas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19700101-19891231.nc' 'SHA256' '09f091b29e5bb6ce394bf79dc429f23d91018f96ec53d8a08289272049f4d4a1'
'tas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19900101-20091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/tas/gn/v20190627/tas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19900101-20091231.nc' 'SHA256' 'ff20352aebab067445cdbf161113bcdf8dd2bce0636e6584e4d87a758c0e3359'
'tas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_20100101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/tas/gn/v20190627/tas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_20100101-20141231.nc' 'SHA256' 'f810a1eb84733fefd8ecb8d3a62a471f9a918e1d4fa8d902f87d0aa5a244eaff'
'ua_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18500101-18691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/ua/gn/v20190627/ua_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18500101-18691231.nc' 'SHA256' '29406bb62e3aa285b300d89c40e64ec7b2404ab0dd9561d4db9208d16a142025'
'ua_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18700101-18891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/ua/gn/v20190627/ua_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18700101-18891231.nc' 'SHA256' '749a0f8e7f8164081c3c137736aeaeffc09af890943cb0cc0ce68f1c833b5551'
'ua_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18900101-19091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/ua/gn/v20190627/ua_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18900101-19091231.nc' 'SHA256' '3af2f4e747d1b9d57dd790eb66ecb9ff6f491ed5bf8419332f552079fd59344a'
'ua_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19100101-19291231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/ua/gn/v20190627/ua_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19100101-19291231.nc' 'SHA256' '19fe6aec54eba6f6485c14c6d7be39eddd3f8453cca308c86dab3f106c59e224'
'ua_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19300101-19491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/ua/gn/v20190627/ua_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19300101-19491231.nc' 'SHA256' '9114261394f27092adda046e4e17c3dc3264b7f235e64d0cc84ed686997df657'
'ua_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19500101-19691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/ua/gn/v20190627/ua_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19500101-19691231.nc' 'SHA256' 'b982d496249514ed588ad8defdc12898613721d582eec33cea42c954e2356913'
'ua_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19700101-19891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/ua/gn/v20190627/ua_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19700101-19891231.nc' 'SHA256' 'bfdc038b291b26deb754b10b44822bfefa7129204ce1c4fb223ea6d16f78e4af'
'ua_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19900101-20091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/ua/gn/v20190627/ua_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19900101-20091231.nc' 'SHA256' 'cb59aa573ef5991b8e056a6f90af39ac400d7ba2b5a1fa17d31796a590733701'
'ua_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_20100101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/ua/gn/v20190627/ua_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_20100101-20141231.nc' 'SHA256' '491ad340ff7b5a03053be9f8b908eba67d9286ad8855301539b6fdf18b5ca2df'
'uas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18500101-18691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/uas/gn/v20190627/uas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18500101-18691231.nc' 'SHA256' '816bb93dc17f51046eaa88b25e16622068d9290cd35cbbb6bba98245e8124bed'
'uas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18700101-18891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/uas/gn/v20190627/uas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18700101-18891231.nc' 'SHA256' '5c4d62161a1890707036e3295079cdd04fbbb004a4b5984ed52f7ea89f3a841c'
'uas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18900101-19091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/uas/gn/v20190627/uas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18900101-19091231.nc' 'SHA256' 'f7a670c9cbd4e3f824c35f3dd9b7abaca32b1be4152cc938202d54ddf6ba9aa2'
'uas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19100101-19291231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/uas/gn/v20190627/uas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19100101-19291231.nc' 'SHA256' '2cdbf0e4c917009141b0649e20e94be232d1f3f08753ff0e85210daa0012f5de'
'uas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19300101-19491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/uas/gn/v20190627/uas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19300101-19491231.nc' 'SHA256' 'aa64fbddff11abfb61fe2fba8b16e807de301e745ec6023383c0880a06ab9945'
'uas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19500101-19691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/uas/gn/v20190627/uas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19500101-19691231.nc' 'SHA256' '844c9bc94e866b03291bf86e57859a4d723b79e403c7a02a69a7bd4f7dc7234b'
'uas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19700101-19891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/uas/gn/v20190627/uas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19700101-19891231.nc' 'SHA256' '0d20be6aacb263c879489b4309f168051c4a78522ef32bb5c3b1d590f70b79e7'
'uas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19900101-20091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/uas/gn/v20190627/uas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19900101-20091231.nc' 'SHA256' '30d7c7671163c3e31ed406113d5301b1279696a4fc8fc2b153a9ce7e2556b3b1'
'uas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_20100101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/uas/gn/v20190627/uas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_20100101-20141231.nc' 'SHA256' 'eee3e6fa174ab2ac57e96ed4f2b0031363dc8c0452c0fef4936881f6db1ff7ab'
'va_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18500101-18691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/va/gn/v20190627/va_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18500101-18691231.nc' 'SHA256' '18efc95303bf745fb886f4f8a987fe3185ca6c6265880c9777b16239319abd21'
'va_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18700101-18891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/va/gn/v20190627/va_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18700101-18891231.nc' 'SHA256' '6a23b089b15e2411ecd95784d98a05566c67ca3ee3dd6f8369c479cc2be2a43b'
'va_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18900101-19091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/va/gn/v20190627/va_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18900101-19091231.nc' 'SHA256' 'd56117d1ef47008dbd88e044e68852e87887a0d2f0191f35eaef25b69d5abe70'
'va_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19100101-19291231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/va/gn/v20190627/va_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19100101-19291231.nc' 'SHA256' 'a7f59bd052164833cc250a72673ca0ff20e7f0dda8b741ad7be6e9065377806a'
'va_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19300101-19491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/va/gn/v20190627/va_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19300101-19491231.nc' 'SHA256' 'c82412b01d87f51bcdea77ed0601b001a462c1a8a2df6bcffcbca2ed5ae51128'
'va_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19500101-19691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/va/gn/v20190627/va_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19500101-19691231.nc' 'SHA256' 'e1af8c6dc3055a2a8f465ed4671c4d85ff91b7685a7bdaceb7a54a39056f7dde'
'va_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19700101-19891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/va/gn/v20190627/va_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19700101-19891231.nc' 'SHA256' '590e2213f5efc84da78eeb3ce453520a2c303f88e1ba0bc5305a6014db7882c4'
'va_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19900101-20091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/va/gn/v20190627/va_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19900101-20091231.nc' 'SHA256' '2845da2ab240eabca9f1a97f9ca6c4bb8c873d42204f77b57f3ddedd1d178bda'
'va_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_20100101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/va/gn/v20190627/va_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_20100101-20141231.nc' 'SHA256' '81673e405727c590aa597692ae1d3000cf55d305aac916648b14005c9e126608'
'vas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18500101-18691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/vas/gn/v20190627/vas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18500101-18691231.nc' 'SHA256' 'f16f383cc9a79a661571b3600f8e386f58155a6538dc7f0873e983bb5ef03bf6'
'vas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18700101-18891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/vas/gn/v20190627/vas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18700101-18891231.nc' 'SHA256' '79a6fb84def2e1faafc92c3de74b5a3fb5d612afbca124fc28ccd836c1cf471a'
'vas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18900101-19091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/vas/gn/v20190627/vas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18900101-19091231.nc' 'SHA256' '355a9b309e365a545fd7655fb14c4134c8aa24738b6825743ed8ccb311605252'
'vas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19100101-19291231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/vas/gn/v20190627/vas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19100101-19291231.nc' 'SHA256' '3a6efee8bd0c68435f3ec63613ce5bffe7aa3790c54d2d5a117f32650d3ec6b1'
'vas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19300101-19491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/vas/gn/v20190627/vas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19300101-19491231.nc' 'SHA256' '1768974b06c47c1052bba40cfec489a9f9204fbdb10361bd96ce85031478b4dc'
'vas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19500101-19691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/vas/gn/v20190627/vas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19500101-19691231.nc' 'SHA256' '4fdda3ce054c953f8d0ad1e4c7a3d10198e5ab54420ade482e7f4f4d1a7f4957'
'vas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19700101-19891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/vas/gn/v20190627/vas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19700101-19891231.nc' 'SHA256' '3c36694c836610d3b6ca46ddacc117d6278c09e80b9d15e77c042b86e02e721b'
'vas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19900101-20091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/vas/gn/v20190627/vas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19900101-20091231.nc' 'SHA256' '7f2cbf0062a8683b7e167e87c6d19df1243ed3a4195f761c7dcec5d4e807fcdd'
'vas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_20100101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/vas/gn/v20190627/vas_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_20100101-20141231.nc' 'SHA256' 'c9ea3f725f27d156c58247850579dd0dc453e6808775e14076968295414f8b16'
'wap_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18500101-18691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/wap/gn/v20190627/wap_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18500101-18691231.nc' 'SHA256' 'df6e5060e2569e0a18f0cc6aff62c3f44dde7a6f0a86f07ba66fd525e96f33aa'
'wap_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18700101-18891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/wap/gn/v20190627/wap_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18700101-18891231.nc' 'SHA256' 'f3bb5aa208b14d1942b27fb6616f30a68c36f8d988c449f93fec761b2c28bb44'
'wap_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18900101-19091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/wap/gn/v20190627/wap_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18900101-19091231.nc' 'SHA256' 'd442e21244651efb4e15e96d05b5d17ff358c4c7f8521c931255c4ae40f93737'
'wap_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19100101-19291231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/wap/gn/v20190627/wap_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19100101-19291231.nc' 'SHA256' 'b0672a4899e0b48cdbc7f0585bf324ffc36621bbf7adb78fcc0dc521891a107c'
'wap_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19300101-19491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/wap/gn/v20190627/wap_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19300101-19491231.nc' 'SHA256' '9c6461a6256bb1b96d4ab486a148c3859ecf04f3b9c5437c0d34cb884d9bd9e3'
'wap_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19500101-19691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/wap/gn/v20190627/wap_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19500101-19691231.nc' 'SHA256' 'afe2b009270fc377ee5ab670c9767aeeeda7ec73cb0ae0015d3537e04a18373c'
'wap_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19700101-19891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/wap/gn/v20190627/wap_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19700101-19891231.nc' 'SHA256' 'cd05cef2e96ce0bdab3a23c8b70c719101e503c8198549bb3790a13070f0cfcd'
'wap_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19900101-20091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/wap/gn/v20190627/wap_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19900101-20091231.nc' 'SHA256' '368ce09a29ff1ab8fe76a9d5191032d794556bdec2b414445d1f02f3178259fc'
'wap_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_20100101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/wap/gn/v20190627/wap_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_20100101-20141231.nc' 'SHA256' '6a07e5a093e233b3caae449b161ef42ec97cad88aeef9732801adfe132dfac28'
'zg_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18500101-18691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/zg/gn/v20190627/zg_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18500101-18691231.nc' 'SHA256' '7432afd5651ffdaf5fd4cbbba165ba757a2aeef4b16d853df53cc5b1aec67b99'
'zg_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18700101-18891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/zg/gn/v20190627/zg_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18700101-18891231.nc' 'SHA256' '04a3c625b6d79d700ad51897cd2fd3d5a72b7020e53d2451780475bbde920e08'
'zg_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18900101-19091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/zg/gn/v20190627/zg_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_18900101-19091231.nc' 'SHA256' '51703515f20109daf8437f14989348d0c4c4f26b793fa7e482e1e39cdb731e91'
'zg_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19100101-19291231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/zg/gn/v20190627/zg_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19100101-19291231.nc' 'SHA256' '4a5fae5adf93cfa354e3c1b4c0ad7a7deb431e2c34331d0aadef6df341fe5a4a'
'zg_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19300101-19491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/zg/gn/v20190627/zg_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19300101-19491231.nc' 'SHA256' 'c343899c2545fe5986aecb02c089d839f41d1c8187cd8283c365142b2b4d2ee1'
'zg_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19500101-19691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/zg/gn/v20190627/zg_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19500101-19691231.nc' 'SHA256' '87ba4382f3d75dd16cd89bdb009abd7ba5dc570e58446c6dea244b4a600b305c'
'zg_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19700101-19891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/zg/gn/v20190627/zg_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19700101-19891231.nc' 'SHA256' 'dc14f92a23fe636553e23172353fcbe9baa52ca02bfe02b144a71de1c2c3cfd2'
'zg_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19900101-20091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/zg/gn/v20190627/zg_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_19900101-20091231.nc' 'SHA256' 'c0b731810445556bd049d69e46649744f78b464a3682af0af1d3629b1de89cfa'
'zg_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_20100101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/day/zg/gn/v20190627/zg_day_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_20100101-20141231.nc' 'SHA256' '086d480c3f54b989f112fc062a7c296597580f15210c201e5721bdb8fabd0603'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 81 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
